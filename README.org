#+OPTIONS: ^:nil

* smp_audio aka slurp
  :PROPERTIES:
  :CUSTOM_ID: slurp
  :END:

Slurp comes from /slurping/ in music data and creating an incremental
model based representation of the audio. This can be then be used for
support or automation of different audio editing and production tasks
such as segmentation, editing, score reconstruction, etc.

The library wraps several different existing MIR libraries, currently
essentia, librosa, madmom, aubio, pyAudioAnalysis.

** Install

On Linux / Ubuntu

: sudo pip3 install -r requirements-simple.txt essentia librosa madmon aubio pyAudioAnalysis

On Mac OSX

Install essentia with their homebrew formula
https://github.com/MTG/homebrew-essentia,
https://essentia.upf.edu/documentation/installing.html

Otherwise

: sudo pip3 install -r requirements-simple.txt librosa madmon aubio pyAudioAnalysis

** Modules and workflows
   :PROPERTIES:
   :CUSTOM_ID: modules
   :END:

The scripts folder contains prototypes for different music related
workflows, e.g. automixing (quantitative measure based playlist
sequencing), or autoedit (beat-tracking and segmentation based
automatic editing and arrangement to duration of choice from raw audio
session that is shorter or longer than output duration).

| *tag*            |                                            | desc                                                                                  |
|------------------+--------------------------------------------+---------------------------------------------------------------------------------------|
| *scripts*        |                                            | smp_audio scripts                                                                     |
| *tools*          |                                            | additional tools to support larger scopes and additional processing steps             |
| silence-splitter |                                            | split a large audio file (> 1h) into smaller parts (e.g. 10') based on silence        |
|                  |                                            | detection                                                                             |
|                  | sox                                        | silence plugin command line                                                           |
|                  |                                            | : sox -V3 audiofile.wav audiofile_part_.wav silence -l  0   1 2.0 0.1%                |
|                  | aubio quiet                                | aubio quiet - analyze audio and print timestamps w/ onsets of silence and noise parts |
|                  |                                            | needs to be converted to input for a slicer or aubiocut                               |
|                  |                                            | : aubio quiet filename.wav                                                            |
|                  | aubio cut                                  | aubiocut cuts audio at every onset incl. option for beat alignment                    |
|                  |                                            |                                                                                       |
| downloaders      |                                            |                                                                                       |
|                  | soundscrape                                | soundcloud and bandcamp downloader                                                    |
|                  |                                            | https://github.com/Miserlou/SoundScrape                                               |
|                  |                                            | : sudo pip3 install SoundScrape                                                       |
|                  | youtube-dl                                 | versatile youtube downloader                                                          |
|                  |                                            |                                                                                       |
| OBSOLETE         |                                            |                                                                                       |
|                  | playground/music\_beats.py                 | stub                                                                                  |
|                  | playground/music\_features\_print\_list.py |                                                                                       |
|                  | playground/music\_features.py              | collection of different sound parsing experiments                                     |
|                  | librosa-onset-detect-1.py                  |                                                                                       |
|                  | librosa-onset-onset\_detect-1.py           | final version using librosa/madmon/essentia for beat tracking and segmentation        |
|                  | librosa-onset-onset\_strength-1.py         |                                                                                       |
|                  | librosa-onset-onset\_strength\_multi-1.py  |                                                                                       |
|                  |                                            |                                                                                       |
|------------------+--------------------------------------------+---------------------------------------------------------------------------------------|
|                  | moved all files to start with music_\*     |                                                                                       |
|                  | copied all files to aim-slurp/scripts      |                                                                                       |

** Process prototype
 - read file
 - apply iterative analyses to dynamically build graph of music data

*** Caching

Using dict of functions and joblib.Memory to cache all compute
intensive funtions. This is done at the calling level.

Librosa has its own caching mechanism, which is used in the librosa
specific code.

: LIBROSA_CACHE_DIR

#+BEGIN_EXAMPLE shell
$ export LIBROSA_CACHE_DIR=/tmp/librosa_cache
$ ipython
#+END_EXAMPLE

#+BEGIN_EXAMPLE python
import os
os.environ['LIBROSA_CACHE_DIR'] = '/tmp/librosa_cache'
import librosa
#+END_EXAMPLE
